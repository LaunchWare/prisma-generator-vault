import type { AbstractQueryModelOptions } from "prisma-generator-vault"
import { BaseRepository } from "prisma-generator-vault"
import type { Prisma, PrismaClient, PrismaPromise } from "./PrismaClientForVault.js"

export abstract class PrismaVaultRepository<TBaseModelOptions extends AbstractQueryModelOptions> extends BaseRepository<TBaseModelOptions> {
  protected client: PrismaClient

  constructor(model: TBaseModelOptions["QueryModel"], client: PrismaClient) {
    super(model)
    this.client = client
  }

  protected async $transaction(args: PrismaPromise<unknown>[], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<unknown>;

  protected async $transaction<R>(
    fn: (prisma: PrismaClient) => Promise<R>,
    options?: { maxWait?: number; timeout?: number; isolationLevel?: Prisma.TransactionIsolationLevel }
  ): Promise<R>;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  protected async $transaction(arg1: any, arg2?: any): Promise<unknown> {
    if (Array.isArray(arg1)) {
      return this.client.$transaction(arg1, arg2);
    } else if (typeof arg1 === 'function') {
      return this.client.$transaction(arg1, arg2);
    }

    throw new Error('Invalid arguments for $transaction');
  }

  protected async $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: unknown[]) {
    return this.client.$queryRaw<T>(query, ...values)
  }
}
