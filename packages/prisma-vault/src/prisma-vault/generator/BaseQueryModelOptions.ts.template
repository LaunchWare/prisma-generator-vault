import type { TQueryModel } from "prisma-vault"

export interface BaseQueryModelOptions<TQueryModel> extends AbstractQueryModelOptions {
  QueryModel: TQueryModel
  CreateInput?: Prisma.Args<TQueryModel, "create">["data"]
  UpdateInput?: Prisma.Args<TQueryModel, "update">["data"]
  WhereInput?: Prisma.Args<TQueryModel, "findMany">["where"]
  WhereUniqueInput?: Prisma.Args<TQueryModel, "update">["where"]
  OrderByInput?: Prisma.Args<TQueryModel, "findMany">["orderBy"]
  IncludeInput?: Prisma.Args<TQueryModel, "findMany">["include"] | null
  SelectInput?: Prisma.Args<TQueryModel, "findMany">["select"] | null
  FindFirstResult: Prisma.Result<
    TQueryModel,
    Pick<Prisma.Args<TQueryModel, "findFirst">, "where" | "include" | "select" | "orderBy">,
    "findFirst"
  >
  FindManyResult: Prisma.Result<
    TQueryModel,
    Pick<Prisma.Args<TQueryModel, "findMany">, "orderBy" | "where" | "skip" | "take" | "cursor" | "include" | "select">,
    "findMany"
  >
  CreateResult: Prisma.Result<TQueryModel, { data: Prisma.Args<TQueryModel, "create">["data"] }, "create">
  UpdateResult: Prisma.Result<
    TQueryModel,
    Prisma.Result<TQueryModel, Pick<Prisma.Args<TQueryModel, "update">, "where" | "data">, "update">,
    "update"
  >
  DeleteResult: Prisma.Result<TQueryModel, { where: Prisma.Args<TQueryModel, "delete">["where"] }, "delete">
}
